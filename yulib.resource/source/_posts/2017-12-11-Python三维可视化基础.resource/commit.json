{"compress":true,"commitItems":[["9356b2f2-3e64-4a81-abbe-df576d1cdedc",1513656299607,"---\ntitle: Python 科学计算可视化--三维可视化基础\ndate: 2017-12-11\ntags:\n  - 学习笔记\ncategories: \n  - Python\n  - 可视化\n---\n\n\n## 科学计算可视化的分类\n\n### 信息可视化\n- 信息\n- 知识\n\n### 科学可视化\n- 空间数据\n\n## 科学可视化的可视化方法\n\n### 二维标量数据场\n- 颜色映射法\n- 等值线方法\n- 立体图法和层次分割法\n\n### 三维标量数据场\n- 面绘制法\n- 体绘制法\n\n### 矢量数据场\n- 直接法\n- 流线法\n\n## TVTK库的安装\n三维可视化工具\nWindows10 64位 + Python3.6，在库文件所在目录里依次安装：\n\n- VTK-7.1.1-cp36-cp36m-win_amd64.whl\n- numpy-1.12.1+mkl-cp36-cp36m-win_amd64.whl\n- traits-4.6.0-cp36-cp36m-win_amd64.whl\n- mayavi-4.5.0+vtk71-cp36-cp36m-win_amd64.whl\n- PyQt4-4.11.4-cp36-cp36m-win_amd64.whl\n\n在.whl文件目录下用管理员身份运行cmd,在cmd中输入`pip install xxx.whl`\n\n## 创建一个TVTK的基本三维对象\n``s = tvtk.CubeSource(traits)``\n\n### CubeSoure对象的属性\n\n属性| 说明\n---|---\ns.x_length | 长方体对象在x轴方向的长度\ns.y_length | 长方体对象在y轴方向的长度\ns.z_length | 长方体对象在z轴方向的长度\ns.center   | 长方体对象所在坐标系的原点\ns.output_points_precision | 长方体对象的精度\n\n### CubeSoure对象的常用方法\n\n属性 | 说明\n---|---\nset/get_x_length() | 设置/获取长方体对象在x轴方向的长度\nset/get_y_length() | 设置/获取长方体对象在y轴方向的长度\nset/get_z_length() | 设置/获取长方体对象在z轴方向的长度\nset/get_center() | 设置/获取长方体对象所在坐标系的原点\nset/get_bounds() | 设置/获取长方体对象的包围盒\n... | ...\n\n### Tvtk库的基本三维对象\n属性 | 说明\n---|---\nCubeSource | 立方体三维对象数据源\nConeSource | 圆锥三维对象数据源\nCylinderSource | 圆柱三维对象数据源\nArcSource | 圆弧三维对象数据源\nArrowSource | 箭头三维对象数据源\n... | ...\n\n示例\n\n``s = tvtk.ConeSource(height=3.0,radius=1.0,resolution=36)``\n\n## tvtk库显示一个三维对象\n```python\n# 导入tvtk库\nfrom tvtk.api import tvtk\n# 创建一个长方体数据源，并且同时设置其长宽高\ns = tvtk.CubeSource(x_length = 1.0,y_length = 2.0,z_length = 3.0)\n# 转换为图形数据\nm = tvtk.PolyDataMapper(input_connection = s.output_port)\n# 创建实体\na = tvtk.Actor(mapper = m)\n# 创建渲染器，将Actor添加进去\nr = tvtk.Renderer(background=(0,0,0))\nr.add_actor(a)\n# 创建一个窗口，将渲染器添加进去\nw = tvtk.RenderWindow(size=(300,300))\nw.add_renderer(r)\n# 创建一个窗口的交互工具\ni = tvtk.RenderWindowInteractor(render_window=w)\ni.initialize()\ni.start()\n```\n\n## 管线（Pipeline）\n\n![可视化](可视化.png)\n\n### 可视化管线\n将原始数据加工成图形数据的过程\n\n\n\n属性 | 说明\n---|---\nCubeSourece | 通过程序内部计算输出一组描述长方体的数据（PloyData）\nPolyDataMapper | PolyData通过该映射器将数据映射为图形数据（mapper）\n\n### 图形管线\n图形数据加工为我们所看到的图像的过程\n\n\n\n属性 | 说明\n---|---\nActor | 场景中的一个实体。它包括一个图形数据（mapper），具有描述该实体的位置，方向，大小的属性。\nRenderer | 渲染的场景。它包括多个需要渲染的Actor\nRenderWindow | 渲染用的图形窗口，它包括一个或者多个Render\nRenderWindowInteractor | 给图形窗口提供一些用户交互功能，例如平移、旋转、放大缩小。这些交互式操作并不改变Actor或者图形数据的属性，只是调整场景中的照相机（Camera）的一些设置。\n\n### 观察Tvtk的管线\n使用ivtk工具\n`` from tvtk.tools import ivtk) ``\n\n",[[1513656281003,["ZHYAT@T_PC",[[-1,95,"可视化"]],[98,98],[95,95]]],[1513656282757,["ZHYAT@T_PC",[[1,95,"Tvtk"]],[95,95],[99,99]]],[1513656285767,["ZHYAT@T_PC",[[1,67,"\n"]],[66,66],[67,67]]],[1513656286177,["ZHYAT@T_PC",[[1,67,"-"]],[67,67],[68,68]]],[1513656287003,["ZHYAT@T_PC",[[-1,67,"-"]],[68,68],[67,67]]],[1513656287730,["ZHYAT@T_PC",[[1,67,"\t"]],[67,67],[68,68]]],[1513656288323,["ZHYAT@T_PC",[[-1,67,"\t"]],[68,68],[67,67]]],[1513656297523,["ZHYAT@T_PC",[[1,67,"  - 三维可视化"]],[67,67],[76,76]]]]],["029ff4cb-c8d8-471f-909d-a8799d8e8de2",1513656580801,"---\ntitle: Python 科学计算可视化--三维可视化基础\ndate: 2017-12-11\ntags:\n  - 学习笔记\n  - 三维可视化\ncategories: \n  - Python\n  - Tvtk\n---\n\n\n## 科学计算可视化的分类\n\n### 信息可视化\n- 信息\n- 知识\n\n### 科学可视化\n- 空间数据\n\n## 科学可视化的可视化方法\n\n### 二维标量数据场\n- 颜色映射法\n- 等值线方法\n- 立体图法和层次分割法\n\n### 三维标量数据场\n- 面绘制法\n- 体绘制法\n\n### 矢量数据场\n- 直接法\n- 流线法\n\n## TVTK库的安装\n三维可视化工具\nWindows10 64位 + Python3.6，在库文件所在目录里依次安装：\n\n- VTK-7.1.1-cp36-cp36m-win_amd64.whl\n- numpy-1.12.1+mkl-cp36-cp36m-win_amd64.whl\n- traits-4.6.0-cp36-cp36m-win_amd64.whl\n- mayavi-4.5.0+vtk71-cp36-cp36m-win_amd64.whl\n- PyQt4-4.11.4-cp36-cp36m-win_amd64.whl\n\n在.whl文件目录下用管理员身份运行cmd,在cmd中输入`pip install xxx.whl`\n\n## 创建一个TVTK的基本三维对象\n``s = tvtk.CubeSource(traits)``\n\n### CubeSoure对象的属性\n\n属性| 说明\n---|---\ns.x_length | 长方体对象在x轴方向的长度\ns.y_length | 长方体对象在y轴方向的长度\ns.z_length | 长方体对象在z轴方向的长度\ns.center   | 长方体对象所在坐标系的原点\ns.output_points_precision | 长方体对象的精度\n\n### CubeSoure对象的常用方法\n\n属性 | 说明\n---|---\nset/get_x_length() | 设置/获取长方体对象在x轴方向的长度\nset/get_y_length() | 设置/获取长方体对象在y轴方向的长度\nset/get_z_length() | 设置/获取长方体对象在z轴方向的长度\nset/get_center() | 设置/获取长方体对象所在坐标系的原点\nset/get_bounds() | 设置/获取长方体对象的包围盒\n... | ...\n\n### Tvtk库的基本三维对象\n属性 | 说明\n---|---\nCubeSource | 立方体三维对象数据源\nConeSource | 圆锥三维对象数据源\nCylinderSource | 圆柱三维对象数据源\nArcSource | 圆弧三维对象数据源\nArrowSource | 箭头三维对象数据源\n... | ...\n\n示例\n\n``s = tvtk.ConeSource(height=3.0,radius=1.0,resolution=36)``\n\n## tvtk库显示一个三维对象\n```python\n# 导入tvtk库\nfrom tvtk.api import tvtk\n# 创建一个长方体数据源，并且同时设置其长宽高\ns = tvtk.CubeSource(x_length = 1.0,y_length = 2.0,z_length = 3.0)\n# 转换为图形数据\nm = tvtk.PolyDataMapper(input_connection = s.output_port)\n# 创建实体\na = tvtk.Actor(mapper = m)\n# 创建渲染器，将Actor添加进去\nr = tvtk.Renderer(background=(0,0,0))\nr.add_actor(a)\n# 创建一个窗口，将渲染器添加进去\nw = tvtk.RenderWindow(size=(300,300))\nw.add_renderer(r)\n# 创建一个窗口的交互工具\ni = tvtk.RenderWindowInteractor(render_window=w)\ni.initialize()\ni.start()\n```\n\n## 管线（Pipeline）\n\n![可视化](可视化.png)\n\n### 可视化管线\n将原始数据加工成图形数据的过程\n\n\n\n属性 | 说明\n---|---\nCubeSourece | 通过程序内部计算输出一组描述长方体的数据（PloyData）\nPolyDataMapper | PolyData通过该映射器将数据映射为图形数据（mapper）\n\n### 图形管线\n图形数据加工为我们所看到的图像的过程\n\n\n\n属性 | 说明\n---|---\nActor | 场景中的一个实体。它包括一个图形数据（mapper），具有描述该实体的位置，方向，大小的属性。\nRenderer | 渲染的场景。它包括多个需要渲染的Actor\nRenderWindow | 渲染用的图形窗口，它包括一个或者多个Render\nRenderWindowInteractor | 给图形窗口提供一些用户交互功能，例如平移、旋转、放大缩小。这些交互式操作并不改变Actor或者图形数据的属性，只是调整场景中的照相机（Camera）的一些设置。\n\n### 观察Tvtk的管线\n使用ivtk工具\n`` from tvtk.tools import ivtk) ``\n\n",[[1513656577906,["ZHYAT@T_PC",[[-1,1798,"## 管线（Pipeline）\n\n![可视化](可视化.png)\n\n### 可视化管线\n将原始数据加工成图形数据的过程\n\n\n\n属性 | 说明\n---|---\nCubeSourece | 通过程序内部计算输出一组描述长方体的数据（PloyData）\nPolyDataMapper | PolyData通过该映射器将数据映射为图形数据（mapper）\n\n### 图形管线\n图形数据加工为我们所看到的图像的过程\n\n\n\n属性 | 说明\n---|---\nActor | 场景中的一个实体。它包括一个图形数据（mapper），具有描述该实体的位置，方向，大小的属性。\nRenderer | 渲染的场景。它包括多个需要渲染的Actor\nRenderWindow | 渲染用的图形窗口，它包括一个或者多个Render\nRenderWindowInteractor | 给图形窗口提供一些用户交互功能，例如平移、旋转、放大缩小。这些交互式操作并不改变Actor或者图形数据的属性，只是调整场景中的照相机（Camera）的一些设置。\n\n### 观察Tvtk的管线\n使用ivtk工具\n`` from tvtk.tools import ivtk) ``\n"]],[1797,2313],[1797,1797]]],[1513656579473,["ZHYAT@T_PC",[[-1,1798,"\n"]],[1797,1797],[1796,1796]]]]]]}