{"compress":true,"commitItems":[["ac9ab2e6-9741-4e5f-a9d9-f191e8779f37",1512975498031,"## 科学计算可视化的分类\n### 信息可视化\n- 信息\n- 知识\n### 科学可视化\n- 空间数据\n\n## 科学可视化的可视化方法\n### 二维标量数据场\n- 颜色映射法\n- 等值线方法\n- 立体图法和层次分割法\n### 三维标量数据场\n- 面绘制法\n- 体绘制法\n### 矢量数据场\n- 直接法\n- 流线法\n\n## TVTK库的安装\n三维可视化工具\nWindows10 64位 + Python3.6，在库文件所在目录里依次安装：\n\n- VTK-7.1.1-cp36-cp36m-win_amd64.whl\n- numpy-1.12.1+mkl-cp36-cp36m-win_amd64.whl\n- traits-4.6.0-cp36-cp36m-win_amd64.whl\n- mayavi-4.5.0+vtk71-cp36-cp36m-win_amd64.whl\n- PyQt4-4.11.4-cp36-cp36m-win_amd64.whl\n\n在.whl文件目录下用管理员身份运行cmd,在cmd中输入`pip install xxx.whl`\n\n## 创建一个TVTK的基本三维对象\n``s = tvtk.CubeSource(traits)``\n\n### CubeSoure对象的属性\n\n属性| 说明\n---|---\ns.x_length | 长方体对象在x轴方向的长度\ns.y_length | 长方体对象在y轴方向的长度\ns.z_length | 长方体对象在z轴方向的长度\ns.center   | 长方体对象所在坐标系的原点\ns.output_points_precision | 长方体对象的精度\n\n### CubeSoure对象的常用方法\n\n属性 | 说明\n---|---\nset/get_x_length() | 设置/获取长方体对象在x轴方向的长度\nset/get_y_length() | 设置/获取长方体对象在y轴方向的长度\nset/get_z_length() | 设置/获取长方体对象在z轴方向的长度\nset/get_center() | 设置/获取长方体对象所在坐标系的原点\nset/get_bounds() | 设置/获取长方体对象的包围盒\n... | ...\n\n### Tvtk库的基本三维对象\n属性 | 说明\n---|---\nCubeSource | 立方体三维对象数据源\nConeSource | 圆锥三维对象数据源\nCylinderSource | 圆柱三维对象数据源\nArcSource | 圆弧三维对象数据源\nArrowSource | 箭头三维对象数据源\n... | ...\n\n示例\n\n``s = tvtk.ConeSource(height=3.0,radius=1.0,resolution=36)``\n\n## tvtk库显示一个三维对象\n```python\n# 导入tvtk库\nfrom tvtk.api import tvtk\n# 创建一个长方体数据源，并且同时设置其长宽高\ns = tvtk.CubeSource(x_length = 1.0,y_length = 2.0,z_length = 3.0)\n# 转换为图形数据\nm = tvtk.PolyDataMapper(input_connection = s.output_port)\n# 创建实体\na = tvtk.Actor(mapper = m)\n# 创建渲染器，将Actor添加进去\nr = tvtk.Renderer(background=(0,0,0))\nr.add_actor(a)\n# 创建一个窗口，将渲染器添加进去\nw = tvtk.RenderWindow(size=(300,300))\nw.add_renderer(r)\n# 创建一个窗口的交互工具\ni = tvtk.RenderWindowInteractor(render_window=w)\ni.initialize()\ni.start()\n```\n\n## 管线（Pipeline）\n### 可视化管线\n将原始数据加工成图形数据的过程\n\n属性 | 说明\n---|---\nCubeSourece | 通过程序内部计算输出一组描述长方体的数据（PloyData）\nPolyDataMapper | PolyData通过该映射器将数据映射为图形数据（mapper）\n\n### 图形管线\n图形数据加工为我们所看到的图像的过程\n\n\n属性 | 说明\n---|---\nActor | 场景中的一个实体。它包括一个图形数据（mapper），具有描述该实体的位置，方向，大小的属性。\nRenderer | 渲染的场景。它包括多个需要渲染的Actor\nRenderWindow | 渲染用的图形窗口，它包括一个或者多个Render\nRenderWindowInteractor | 给图形窗口提供一些用户交互功能，例如平移、旋转、放大缩小。这些交互式操作并不改变Actor或者图形数据的属性，只是调整场景中的照相机（Camera）的一些设置。\n\n### 观察Tvtk的管线\n使用ivtk工具\n`` from tvtk.tools import ivtk) ``\n\n",[[1512975466577,["ZHYAT@T_PC",[[1,0,"\n"]],[0,0],[1,1]]],[1512975466965,["ZHYAT@T_PC",[[1,0,"\n"]],[1,1],[2,2]]],[1512975468623,["ZHYAT@T_PC",[[1,0,"---\ntitle: FCC 高级算法题之验证美国电话号码（Validate US Telephone Numbers）\ndate: 2017-11-30\ntags:\n  - 学习笔记\n  - FreeCodeCamp\ncategories: \n  - 正则表达式\n\n---\n"]],[0,0],[138,138]]],[1512975479502,["ZHYAT@T_PC",[[-1,11,"FCC 高级算法题之验证美国电话号码（Validate US Telephone Numbers）"],[1,60,"Python ke"]],[11,60],[20,20]]],[1512975480177,["ZHYAT@T_PC",[[-1,18,"ke"]],[20,20],[18,18]]],[1512975491464,["ZHYAT@T_PC",[[1,18,"科学计算可视化之"]],[18,18],[26,26]]],[1512975492195,["ZHYAT@T_PC",[[-1,25,"之"]],[26,26],[25,25]]],[1512975515535,["ZHYAT@T_PC",[[1,25,"--三维可视化基础"]],[25,25],[34,34]]],[1512975529627,["ZHYAT@T_PC",[[-1,101,"正则表达式"],[1,106,"P"]],[101,106],[101,102]]],[1512975530067,["ZHYAT@T_PC",[[1,102,"y"]],[101,102],[101,103]]],[1512975530254,["ZHYAT@T_PC",[[1,103,"t"]],[101,103],[101,104]]],[1512975530335,["ZHYAT@T_PC",[[1,104,"h"]],[101,104],[101,105]]],[1512975530491,["ZHYAT@T_PC",[[1,105,"o"]],[101,105],[101,106]]],[1512975531460,["ZHYAT@T_PC",[[1,106,"n"]],[101,106],[101,107]]],[1512975533364,["ZHYAT@T_PC",[[1,109,"\n"]],[107,107],[108,108]]],[1512975535417,["ZHYAT@T_PC",[[1,108," -"]],[108,108],[110,110]]],[1512975535895,["ZHYAT@T_PC",[[-1,109,"-"]],[110,110],[109,109]]],[1512975541459,["ZHYAT@T_PC",[[1,109," - 三维"]],[109,109],[114,114]]],[1512975542297,["ZHYAT@T_PC",[[-1,112,"三维"]],[114,114],[112,112]]],[1512975548718,["ZHYAT@T_PC",[[1,112,"可视化"]],[112,112],[115,115]]],[1512975552004,["ZHYAT@T_PC",[[-1,116,"\n"]],[116,116],[115,115]]],[1512975555354,["ZHYAT@T_PC",[[-1,67,"  - FreeCodeCamp"]],[67,83],[67,67]]],[1512975556528,["ZHYAT@T_PC",[[-1,67,"\n"]],[67,67],[66,66]]],[1512975651724,["ZHYAT@T_PC",[[1,1825,"![可视化01](_posts/2017-12-11-%E4%B8%89%E7%BB%B4%E5%8F%AF%E8%A7%86%E5%8C%96%E5%9F%BA%E7%A1%80/%E5%8F%AF%E8%A7%86%E5%8C%9601.png)\n\n"]],[1824,1824],[1951,1951]]],[1512975665106,["ZHYAT@T_PC",[[1,2094,"![可视化02](_posts/2017-12-11-%E4%B8%89%E7%BB%B4%E5%8F%AF%E8%A7%86%E5%8C%96%E5%9F%BA%E7%A1%80/%E5%8F%AF%E8%A7%86%E5%8C%9602.png)\n\n"]],[2093,2093],[2220,2220]]],[1512975708381,["ZHYAT@T_PC",[[-1,2103,"_posts/"]],[2103,2110],[2103,2103]]],[1512975712062,["ZHYAT@T_PC",[[-1,2114,"%E4%B8%89%E7%BB%B4%E5%8F%AF%E8%A7%86%E5%8C%96%E5%9F%BA%E7%A1%80/%E5%8F%AF%E8%A7%86%E5%8C%9602"]],[2114,2207],[2114,2114]]],[1512975716410,["ZHYAT@T_PC",[[1,2114,"可视化01"]],[2114,2114],[2119,2119]]],[1512975733987,["ZHYAT@T_PC",[[-1,2118,"1"]],[2119,2119],[2118,2118]]],[1512975734441,["ZHYAT@T_PC",[[1,2118,"2"]],[2118,2118],[2119,2119]]],[1512975737331,["ZHYAT@T_PC",[[-1,2094,"![可视化02](2017-12-11-可视化02.png)"]],[2124,2124],[2094,2094]]],[1512975738505,["ZHYAT@T_PC",[[1,2094,"![可视化02](2017-12-11-可视化02.png)"]],[2094,2094],[2124,2124]]],[1512975742987,["ZHYAT@T_PC",[[-1,1831,"1"],[1,1832,"2"],[-1,1834,"_posts/"],[-1,1852,"%E4%B8%89%E7%BB%B4%E5%8F%AF%E8%A7%86%E5%8C%96%E5%9F%BA%E7%A1%80/%E5%8F%AF%E8%A7%86%E5%8C%9601"],[1,1945,"可视化02"]],[1825,1950],[1855,1855]]],[1512975745737,["ZHYAT@T_PC",[[-1,1831,"2"]],[1832,1832],[1831,1831]]],[1512975746173,["ZHYAT@T_PC",[[1,1831,"1"]],[1831,1831],[1832,1832]]],[1512975749615,["ZHYAT@T_PC",[[-1,1849,"2"]],[1850,1850],[1849,1849]]],[1512975750380,["ZHYAT@T_PC",[[1,1849,"1"]],[1849,1849],[1850,1850]]]]],["f8d383c2-f060-436f-9285-488001825f97",1512976118439,"---\ntitle: Python 科学计算可视化--三维可视化基础\ndate: 2017-11-30\ntags:\n  - 学习笔记\ncategories: \n  - Python\n  - 可视化\n---\n\n\n## 科学计算可视化的分类\n### 信息可视化\n- 信息\n- 知识\n### 科学可视化\n- 空间数据\n\n## 科学可视化的可视化方法\n### 二维标量数据场\n- 颜色映射法\n- 等值线方法\n- 立体图法和层次分割法\n### 三维标量数据场\n- 面绘制法\n- 体绘制法\n### 矢量数据场\n- 直接法\n- 流线法\n\n## TVTK库的安装\n三维可视化工具\nWindows10 64位 + Python3.6，在库文件所在目录里依次安装：\n\n- VTK-7.1.1-cp36-cp36m-win_amd64.whl\n- numpy-1.12.1+mkl-cp36-cp36m-win_amd64.whl\n- traits-4.6.0-cp36-cp36m-win_amd64.whl\n- mayavi-4.5.0+vtk71-cp36-cp36m-win_amd64.whl\n- PyQt4-4.11.4-cp36-cp36m-win_amd64.whl\n\n在.whl文件目录下用管理员身份运行cmd,在cmd中输入`pip install xxx.whl`\n\n## 创建一个TVTK的基本三维对象\n``s = tvtk.CubeSource(traits)``\n\n### CubeSoure对象的属性\n\n属性| 说明\n---|---\ns.x_length | 长方体对象在x轴方向的长度\ns.y_length | 长方体对象在y轴方向的长度\ns.z_length | 长方体对象在z轴方向的长度\ns.center   | 长方体对象所在坐标系的原点\ns.output_points_precision | 长方体对象的精度\n\n### CubeSoure对象的常用方法\n\n属性 | 说明\n---|---\nset/get_x_length() | 设置/获取长方体对象在x轴方向的长度\nset/get_y_length() | 设置/获取长方体对象在y轴方向的长度\nset/get_z_length() | 设置/获取长方体对象在z轴方向的长度\nset/get_center() | 设置/获取长方体对象所在坐标系的原点\nset/get_bounds() | 设置/获取长方体对象的包围盒\n... | ...\n\n### Tvtk库的基本三维对象\n属性 | 说明\n---|---\nCubeSource | 立方体三维对象数据源\nConeSource | 圆锥三维对象数据源\nCylinderSource | 圆柱三维对象数据源\nArcSource | 圆弧三维对象数据源\nArrowSource | 箭头三维对象数据源\n... | ...\n\n示例\n\n``s = tvtk.ConeSource(height=3.0,radius=1.0,resolution=36)``\n\n## tvtk库显示一个三维对象\n```python\n# 导入tvtk库\nfrom tvtk.api import tvtk\n# 创建一个长方体数据源，并且同时设置其长宽高\ns = tvtk.CubeSource(x_length = 1.0,y_length = 2.0,z_length = 3.0)\n# 转换为图形数据\nm = tvtk.PolyDataMapper(input_connection = s.output_port)\n# 创建实体\na = tvtk.Actor(mapper = m)\n# 创建渲染器，将Actor添加进去\nr = tvtk.Renderer(background=(0,0,0))\nr.add_actor(a)\n# 创建一个窗口，将渲染器添加进去\nw = tvtk.RenderWindow(size=(300,300))\nw.add_renderer(r)\n# 创建一个窗口的交互工具\ni = tvtk.RenderWindowInteractor(render_window=w)\ni.initialize()\ni.start()\n```\n\n## 管线（Pipeline）\n### 可视化管线\n将原始数据加工成图形数据的过程\n\n![可视化01](2017-12-11-可视化01.png)\n\n属性 | 说明\n---|---\nCubeSourece | 通过程序内部计算输出一组描述长方体的数据（PloyData）\nPolyDataMapper | PolyData通过该映射器将数据映射为图形数据（mapper）\n\n### 图形管线\n图形数据加工为我们所看到的图像的过程\n\n\n![可视化02](2017-12-11-可视化02.png)\n\n属性 | 说明\n---|---\nActor | 场景中的一个实体。它包括一个图形数据（mapper），具有描述该实体的位置，方向，大小的属性。\nRenderer | 渲染的场景。它包括多个需要渲染的Actor\nRenderWindow | 渲染用的图形窗口，它包括一个或者多个Render\nRenderWindowInteractor | 给图形窗口提供一些用户交互功能，例如平移、旋转、放大缩小。这些交互式操作并不改变Actor或者图形数据的属性，只是调整场景中的照相机（Camera）的一些设置。\n\n### 观察Tvtk的管线\n使用ivtk工具\n`` from tvtk.tools import ivtk) ``\n\n",[[1512976101393,["ZHYAT@T_PC",[[-1,47,"1"]],[46,48],[47,47]]],[1512976101456,["ZHYAT@T_PC",[[1,47,"2"]],[47,47],[48,48]]],[1512976102934,["ZHYAT@T_PC",[[-1,49,"30"]],[51,51],[49,49]]],[1512976103832,["ZHYAT@T_PC",[[1,49,"11"]],[49,49],[51,51]]],[1512976113499,["ZHYAT@T_PC",[[-1,1834,"2017-12-11-"]],[1834,1845],[1834,1834]]],[1512976117039,["ZHYAT@T_PC",[[-1,1997,"2017-12-11-"]],[1997,2008],[1997,1997]]],[1512976128021,["ZHYAT@T_PC",[[1,119,"\n"]],[118,118],[119,119]]],[1512976130285,["ZHYAT@T_PC",[[1,140,"\n"]],[139,139],[140,140]]],[1512976131486,["ZHYAT@T_PC",[[1,174,"\n"]],[173,173],[174,174]]],[1512976134198,["ZHYAT@T_PC",[[1,216,"\n"]],[215,215],[216,216]]],[1512976135977,["ZHYAT@T_PC",[[1,243,"\n"]],[242,242],[243,243]]]]],["1f128f4a-a5f1-4cef-a371-232d5dd79e6b",1512978088106,"---\ntitle: Python 科学计算可视化--三维可视化基础\ndate: 2017-12-11\ntags:\n  - 学习笔记\ncategories: \n  - Python\n  - 可视化\n---\n\n\n## 科学计算可视化的分类\n\n### 信息可视化\n- 信息\n- 知识\n\n### 科学可视化\n- 空间数据\n\n## 科学可视化的可视化方法\n\n### 二维标量数据场\n- 颜色映射法\n- 等值线方法\n- 立体图法和层次分割法\n\n### 三维标量数据场\n- 面绘制法\n- 体绘制法\n\n### 矢量数据场\n- 直接法\n- 流线法\n\n## TVTK库的安装\n三维可视化工具\nWindows10 64位 + Python3.6，在库文件所在目录里依次安装：\n\n- VTK-7.1.1-cp36-cp36m-win_amd64.whl\n- numpy-1.12.1+mkl-cp36-cp36m-win_amd64.whl\n- traits-4.6.0-cp36-cp36m-win_amd64.whl\n- mayavi-4.5.0+vtk71-cp36-cp36m-win_amd64.whl\n- PyQt4-4.11.4-cp36-cp36m-win_amd64.whl\n\n在.whl文件目录下用管理员身份运行cmd,在cmd中输入`pip install xxx.whl`\n\n## 创建一个TVTK的基本三维对象\n``s = tvtk.CubeSource(traits)``\n\n### CubeSoure对象的属性\n\n属性| 说明\n---|---\ns.x_length | 长方体对象在x轴方向的长度\ns.y_length | 长方体对象在y轴方向的长度\ns.z_length | 长方体对象在z轴方向的长度\ns.center   | 长方体对象所在坐标系的原点\ns.output_points_precision | 长方体对象的精度\n\n### CubeSoure对象的常用方法\n\n属性 | 说明\n---|---\nset/get_x_length() | 设置/获取长方体对象在x轴方向的长度\nset/get_y_length() | 设置/获取长方体对象在y轴方向的长度\nset/get_z_length() | 设置/获取长方体对象在z轴方向的长度\nset/get_center() | 设置/获取长方体对象所在坐标系的原点\nset/get_bounds() | 设置/获取长方体对象的包围盒\n... | ...\n\n### Tvtk库的基本三维对象\n属性 | 说明\n---|---\nCubeSource | 立方体三维对象数据源\nConeSource | 圆锥三维对象数据源\nCylinderSource | 圆柱三维对象数据源\nArcSource | 圆弧三维对象数据源\nArrowSource | 箭头三维对象数据源\n... | ...\n\n示例\n\n``s = tvtk.ConeSource(height=3.0,radius=1.0,resolution=36)``\n\n## tvtk库显示一个三维对象\n```python\n# 导入tvtk库\nfrom tvtk.api import tvtk\n# 创建一个长方体数据源，并且同时设置其长宽高\ns = tvtk.CubeSource(x_length = 1.0,y_length = 2.0,z_length = 3.0)\n# 转换为图形数据\nm = tvtk.PolyDataMapper(input_connection = s.output_port)\n# 创建实体\na = tvtk.Actor(mapper = m)\n# 创建渲染器，将Actor添加进去\nr = tvtk.Renderer(background=(0,0,0))\nr.add_actor(a)\n# 创建一个窗口，将渲染器添加进去\nw = tvtk.RenderWindow(size=(300,300))\nw.add_renderer(r)\n# 创建一个窗口的交互工具\ni = tvtk.RenderWindowInteractor(render_window=w)\ni.initialize()\ni.start()\n```\n\n## 管线（Pipeline）\n### 可视化管线\n将原始数据加工成图形数据的过程\n\n![可视化01](可视化01.png)\n\n属性 | 说明\n---|---\nCubeSourece | 通过程序内部计算输出一组描述长方体的数据（PloyData）\nPolyDataMapper | PolyData通过该映射器将数据映射为图形数据（mapper）\n\n### 图形管线\n图形数据加工为我们所看到的图像的过程\n\n\n![可视化02](可视化02.png)\n\n属性 | 说明\n---|---\nActor | 场景中的一个实体。它包括一个图形数据（mapper），具有描述该实体的位置，方向，大小的属性。\nRenderer | 渲染的场景。它包括多个需要渲染的Actor\nRenderWindow | 渲染用的图形窗口，它包括一个或者多个Render\nRenderWindowInteractor | 给图形窗口提供一些用户交互功能，例如平移、旋转、放大缩小。这些交互式操作并不改变Actor或者图形数据的属性，只是调整场景中的照相机（Camera）的一些设置。\n\n### 观察Tvtk的管线\n使用ivtk工具\n`` from tvtk.tools import ivtk) ``\n\n",[[1512978077111,["ZHYAT@T_PC",[[-1,1993,"![可视化02](可视化02.png)\n"]],[1993,2013],[1993,1993]]],[1512978079780,["ZHYAT@T_PC",[[-1,1830,"![可视化01](可视化01.png)"]],[1830,1849],[1830,1830]]],[1512978081092,["ZHYAT@T_PC",[[1,1803,"\n"]],[1802,1802],[1803,1803]]],[1512978082262,["ZHYAT@T_PC",[[1,1804,"\n"]],[1803,1803],[1804,1804]]],[1512978082669,["ZHYAT@T_PC",[[1,1804,"![可视化01](可视化01.png)"]],[1804,1804],[1823,1823]]],[1512978084474,["ZHYAT@T_PC",[[1,1824,"\n"]],[1823,1823],[1824,1824]]]]],["2fba49f8-ca14-4d3e-a45d-8ce9bf4d8cb4",1512978279947,"---\ntitle: Python 科学计算可视化--三维可视化基础\ndate: 2017-12-11\ntags:\n  - 学习笔记\ncategories: \n  - Python\n  - 可视化\n---\n\n\n## 科学计算可视化的分类\n\n### 信息可视化\n- 信息\n- 知识\n\n### 科学可视化\n- 空间数据\n\n## 科学可视化的可视化方法\n\n### 二维标量数据场\n- 颜色映射法\n- 等值线方法\n- 立体图法和层次分割法\n\n### 三维标量数据场\n- 面绘制法\n- 体绘制法\n\n### 矢量数据场\n- 直接法\n- 流线法\n\n## TVTK库的安装\n三维可视化工具\nWindows10 64位 + Python3.6，在库文件所在目录里依次安装：\n\n- VTK-7.1.1-cp36-cp36m-win_amd64.whl\n- numpy-1.12.1+mkl-cp36-cp36m-win_amd64.whl\n- traits-4.6.0-cp36-cp36m-win_amd64.whl\n- mayavi-4.5.0+vtk71-cp36-cp36m-win_amd64.whl\n- PyQt4-4.11.4-cp36-cp36m-win_amd64.whl\n\n在.whl文件目录下用管理员身份运行cmd,在cmd中输入`pip install xxx.whl`\n\n## 创建一个TVTK的基本三维对象\n``s = tvtk.CubeSource(traits)``\n\n### CubeSoure对象的属性\n\n属性| 说明\n---|---\ns.x_length | 长方体对象在x轴方向的长度\ns.y_length | 长方体对象在y轴方向的长度\ns.z_length | 长方体对象在z轴方向的长度\ns.center   | 长方体对象所在坐标系的原点\ns.output_points_precision | 长方体对象的精度\n\n### CubeSoure对象的常用方法\n\n属性 | 说明\n---|---\nset/get_x_length() | 设置/获取长方体对象在x轴方向的长度\nset/get_y_length() | 设置/获取长方体对象在y轴方向的长度\nset/get_z_length() | 设置/获取长方体对象在z轴方向的长度\nset/get_center() | 设置/获取长方体对象所在坐标系的原点\nset/get_bounds() | 设置/获取长方体对象的包围盒\n... | ...\n\n### Tvtk库的基本三维对象\n属性 | 说明\n---|---\nCubeSource | 立方体三维对象数据源\nConeSource | 圆锥三维对象数据源\nCylinderSource | 圆柱三维对象数据源\nArcSource | 圆弧三维对象数据源\nArrowSource | 箭头三维对象数据源\n... | ...\n\n示例\n\n``s = tvtk.ConeSource(height=3.0,radius=1.0,resolution=36)``\n\n## tvtk库显示一个三维对象\n```python\n# 导入tvtk库\nfrom tvtk.api import tvtk\n# 创建一个长方体数据源，并且同时设置其长宽高\ns = tvtk.CubeSource(x_length = 1.0,y_length = 2.0,z_length = 3.0)\n# 转换为图形数据\nm = tvtk.PolyDataMapper(input_connection = s.output_port)\n# 创建实体\na = tvtk.Actor(mapper = m)\n# 创建渲染器，将Actor添加进去\nr = tvtk.Renderer(background=(0,0,0))\nr.add_actor(a)\n# 创建一个窗口，将渲染器添加进去\nw = tvtk.RenderWindow(size=(300,300))\nw.add_renderer(r)\n# 创建一个窗口的交互工具\ni = tvtk.RenderWindowInteractor(render_window=w)\ni.initialize()\ni.start()\n```\n\n## 管线（Pipeline）\n\n![可视化01](可视化01.png)\n\n### 可视化管线\n将原始数据加工成图形数据的过程\n\n\n\n属性 | 说明\n---|---\nCubeSourece | 通过程序内部计算输出一组描述长方体的数据（PloyData）\nPolyDataMapper | PolyData通过该映射器将数据映射为图形数据（mapper）\n\n### 图形管线\n图形数据加工为我们所看到的图像的过程\n\n\n\n属性 | 说明\n---|---\nActor | 场景中的一个实体。它包括一个图形数据（mapper），具有描述该实体的位置，方向，大小的属性。\nRenderer | 渲染的场景。它包括多个需要渲染的Actor\nRenderWindow | 渲染用的图形窗口，它包括一个或者多个Render\nRenderWindowInteractor | 给图形窗口提供一些用户交互功能，例如平移、旋转、放大缩小。这些交互式操作并不改变Actor或者图形数据的属性，只是调整场景中的照相机（Camera）的一些设置。\n\n### 观察Tvtk的管线\n使用ivtk工具\n`` from tvtk.tools import ivtk) ``\n\n",[[1512978276453,["ZHYAT@T_PC",[[-1,1816,"01"]],[1818,1818],[1816,1816]]],[1512978279212,["ZHYAT@T_PC",[[-1,1809,"01"]],[1811,1811],[1809,1809]]]]]]}